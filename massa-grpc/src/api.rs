//! Copyright (c) 2022 MASSA LABS <info@massa.net>
//! Json RPC API for a massa-node
use std::pin::Pin;

use crate::config::GrpcConfig;
use massa_consensus_exports::ConsensusChannels;
use massa_pool_exports::PoolChannels;

/// gRPC autogenerated service module
pub mod massa {
    tonic::include_proto!("grpc.massa.protobuf");
}

use futures_util::FutureExt;
use massa::massa_server::Massa;
use tokio::sync::oneshot;
use tonic::codegen::futures_core;
use tracing::{info, warn};

use self::massa::massa_server::MassaServer;

/// gRPC API content
pub struct MassaService {
    /// link(channels) to the consensus component
    pub consensus_channels: ConsensusChannels,
    /// link(channels) to the pool component
    pub pool_channels: PoolChannels,
    /// gRPC configuration
    pub grpc_config: GrpcConfig,
    /// node version
    pub version: massa_models::version::Version,
}

impl MassaService {
    /// Start the gRPC API
    pub async fn serve(
        self,
        config: &GrpcConfig,
    ) -> Result<
        (
            StopHandle,
            impl futures_util::Future<Output = Result<(), tonic::transport::Error>>,
        ),
        Box<dyn std::error::Error>,
    > {
        let svc = MassaServer::new(self);
        let (shutdown_send, shutdown_recv) = oneshot::channel::<()>();
        let server_future = tonic::transport::Server::builder()
            .add_service(svc)
            .serve_with_shutdown(config.bind, shutdown_recv.map(drop));

        Ok((
            StopHandle {
                server_handler: shutdown_send,
            },
            server_future,
        ))
    }
}

/// Used to be able to stop the gRPC API
pub struct StopHandle {
    server_handler: oneshot::Sender<()>,
}

impl StopHandle {
    /// stop the gRPC API gracefully
    pub fn stop(self) {
        match self.server_handler.send(()) {
            Ok(_) => {
                info!("gRPC API finished cleanly");
            }
            Err(err) => warn!("gRPC API thread panicked: {:?}", err),
        }
    }
}

#[tonic::async_trait]
impl Massa for MassaService {
    async fn get_version(
        &self,
        _request: tonic::Request<()>,
    ) -> Result<tonic::Response<massa::Version>, tonic::Status> {
        Ok(tonic::Response::new(massa::Version {
            version: self.version.to_string(),
        }))
    }

    type SendBlocksStream = Pin<
        Box<
            dyn futures_core::Stream<Item = Result<massa::BlockId, tonic::Status>> + Send + 'static,
        >,
    >;

    async fn send_blocks(
        &self,
        _request: tonic::Request<tonic::Streaming<massa::SendBlocksRequest>>,
    ) -> Result<tonic::Response<Self::SendBlocksStream>, tonic::Status> {
        unimplemented!()
    }

    type SendEndorsementsStream = Pin<
        Box<
            dyn futures_core::Stream<Item = Result<massa::EndorsementId, tonic::Status>>
                + Send
                + 'static,
        >,
    >;

    async fn send_endorsements(
        &self,
        _request: tonic::Request<tonic::Streaming<massa::SendEndorsementsRequest>>,
    ) -> Result<tonic::Response<Self::SendEndorsementsStream>, tonic::Status> {
        unimplemented!()
    }

    type SendOperationsStream = Pin<
        Box<
            dyn futures_core::Stream<Item = Result<massa::OperationId, tonic::Status>>
                + Send
                + 'static,
        >,
    >;

    async fn send_operations(
        &self,
        _request: tonic::Request<tonic::Streaming<massa::SendOperationsRequest>>,
    ) -> Result<tonic::Response<Self::SendOperationsStream>, tonic::Status> {
        unimplemented!()
    }
}
